using System.Collections.Generic;
using UnityEngine;

public class AStarPathfinding : MonoBehaviour {
    public List<Node> FindPath(Node startNode, Node targetNode, Node[,] grid) {
        List<Node> openSet = new List<Node>();
        HashSet<Node> closedSet = new HashSet<Node>();
        openSet.Add(startNode);
        while (openSet.Count > 0) {
            Node currentNode = openSet[0];
            for (int i = 1; i < openSet.Count; i++) {
                if (openSet[i].fCost < currentNode.fCost ||
                    (openSet[i].fCost == currentNode.fCost && openSet[i].hCost < currentNode.hCost)) {
                    currentNode = openSet[i];
                }
            }

            openSet.Remove(currentNode);
            closedSet.Add(currentNode);
            if (currentNode == targetNode) {
                return RetracePath(startNode, targetNode);
            }

            foreach (Node neighbor in GetNeighbors(currentNode, grid)) {
                if (!neighbor.walkable || closedSet.Contains(neighbor))
                    continue;
                int newMovementCost = currentNode.gCost + GetDistance(currentNode, neighbor);
                if (newMovementCost < neighbor.gCost || !openSet.Contains(neighbor)) {
                    neighbor.gCost = newMovementCost;
                    neighbor.hCost = GetDistance(neighbor, targetNode);
                    neighbor.parent = currentNode;
                    if (!openSet.Contains(neighbor))
                        openSet.Add(neighbor);
                }
            }
        }

        return null; 
    }

    List<Node> RetracePath(Node startNode, Node endNode) {
        List<Node> path = new List<Node>();
        Node currentNode = endNode;
        while (currentNode != startNode) {
            path.Add(currentNode);
            currentNode = currentNode.parent;
        }
        path.Reverse();
        return path;
    }

    List<Node> GetNeighbors(Node node, Node[,] grid) {
        List<Node> neighbors = new List<Node>();
        Vector2Int[] directions = {
            Vector2Int.up, Vector2Int.down,
            Vector2Int.left, Vector2Int.right
        };

        foreach (var dir in directions) {
            Vector2Int neighborPos = node.gridPosition + dir;
            if (neighborPos.x >= 0 && neighborPos.y >= 0 &&
                neighborPos.x < grid.GetLength(0) && neighborPos.y < grid.GetLength(1)) {
                neighbors.Add(grid[neighborPos.x, neighborPos.y]);
            }
        }
        return neighbors;
    }

    int GetDistance(Node a, Node b) {
        int dstX = Mathf.Abs(a.gridPosition.x - b.gridPosition.x);
        int dstY = Mathf.Abs(a.gridPosition.y - b.gridPosition.y);
        return dstX + dstY; 
    }
}
